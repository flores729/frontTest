:root{
    --primaryColor: green;
    --errorColor: orange;
}
    /* 
css에 변수 선언시 :root{} 내부에 key와 value값으로 값을 설정
key 이름 임의 지정
value css값 설정 */

html{
    box-sizing:border-box;
    /* 박스모델(content, padding, border, margin) 설정 */
    /* content-box는 영역의 크기를 지정시 padding과 margin 제외 content크기만 계산 */
    /* border-box는 padding과 border를 포함한 content크기 계산 */
    /* 일반적으로 content크기 지정시 padding 과 border포함 */
}

body{
    display: flex;
    align-items: center;
    /* 수직중앙정렬 */
    justify-content: center;
    /* 수평중앙정렬 */
    min-height: 100vh;
    /* 뷰포트 높이를 100%를 최소높이로 지정 -> 우리가 바라보는 포인트 */
    background-color: white;
}

#wrapper{
    width: 420px;
    box-shadow: 0px 4px 14px rgba(0,0,0,0.2);
    /* 영역의 그림자 생성
    0px 수평방향 그림자 생성
    4px 수직방향 그림자 생성
    14px 그림자의 블러 적용
    rgba(0,0,0,0,2) 그림자의 색깔 */
}

h2{
    text-align: center;
    margin-top: 20px;
}

.inputGroup{
    padding: 8px 12px;
    /* 8px padding 위아래로, 12px 양옆으로 */
}

.inputGroup label{
    display: block;
    padding: 12px 0;
}

.inputGroup input{
    display: block;
    /* 영역과 공간 차지 */
    width: 93%;
    padding: 12px;
    border: 2px solid grey;
    font-size: 16px;
}

.inputGroup input:focus{
    /* 선택시 지정 */
    outline: none;
    /* 테두리 안보이게 = none */
    border-color: black;
    /* 테두리 색 지정 */
}

.inputGroup.valid input{
    border-color: var(--primaryColor);
    /* .valid는 자바스크립트를 통해 가상의 css 선택자를 설정 */
    /* var(--primaryColor) -> green */
}

.inputGroup.invalid input{
    border-color: var(--errorColor);
    /* .valid는 자바스크립트를 통해 가상의 css 선택자를 설정 */
    /* var(--primaryColor) -> green */
}

.inputGroup.helperText{
    display: 8px;
    padding-top: 8px;
}

.inputGroup.valid.helperText{
    visibility: hidden;
}

.inputGroup.invalid.helperText{
    color: var(--errorColor);
}

#wrapper button{
    display: block;
    width: 85%;
    margin: 0 auto;
    height: 50px;
    margin-bottom: 25px;
    font-size: 18px;
    background-color: var(--primaryColor);
    border: 2px solid var(--primaryColor);
    color: white;
    /* 텍스트색 */
    cursor: pointer;
}












































/* css 레이아웃 구성 */
/* display */
/* 레이아웃의 공간과 영역을 표현하는 용어, 영역은 2차원을 의미, 공간은 3차원을 의미*/
/* 
label{
    display: inline or none or block or inline-block
} 
*/
/* 2차원=inline 3차원=block */
/* 2차원 - inline, none */
/* 3차원 - block, inline-block */

/* position */
/* 요소의 위치를 지정하게 해준다 */
/* 특정 위치로 요소를 배치할 수 있게 한다. */
/* 
label{
    position:static or relative or absolute or fixed
} 
*/
/* static => default 기능없음 기본적인 흐름에 맞춰서 배치된다. 좌표지정이 불가능하다. top, bottom과 같은 키워드 사용*/
/* relative => 원래있던 위치 기반 상대적 이동가능 top, bottom, right, left : px로 지정해서 이동*/
/* absolute => 부모 위치 기반 상대적 이동가능 단 부모 요소가 static이 아닌경우에만 좌표값 설정 가능*/
/* fixed => */

/* flex */
/* 부모 + 자식 으로 이루어진 기능 */
/* 부모 = 기능 정의 */
/* 자식 = 기능 호출 */
/* 부모에 기본적인 정보를 저장해두면 자식을 생성 시 자동으로 적용된다. */
/* flex-direction:row or column; -> 이 값에 따라 다른 값들의 정렬 위치가 결정된다.*/
/* align-items:flex-start or center or flex-end; 단일 행 + 복수 행에 적용  */
/* justify-content:flex-start or center or flex-end or ... 복수 행에만 적용 즉 행이 2개 이상 필요(대상이)*/
/* 
예시
.parent-container {
    display: flex;
    flex-direction: row; 
    align-items: center; 
} */